{"version":3,"sources":["gqlQueries.js","components/CreateTodo.js","components/CompleteTodos.js","components/NotCompleteTodos.js","App.js","reportWebVitals.js","index.js"],"names":["COMPLETE_TODOS","gql","NOT_COMPLETE_TODOS","CREATE_TODO","UPDATE_TODO","CreateTodo","input","useMutation","refetchQueries","createTodo","loading","error","className","onSubmit","e","preventDefault","variables","task","value","ref","node","type","CompleteTodos","checktodo","useQuery","data","todos","map","id","completed","checked","onChange","target","NotCompleteTodos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","client","ApolloClient","uri","cache","InMemoryCache","headers","render","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.f371935a.chunk.js","sourcesContent":["import {gql} from \"@apollo/client\";\n\nconst FETCH_TODOS = gql`\n      query FetchTodos {\n        todos{\n          id  \n          task\n          completed\n        }\n      }`;\nconst COMPLETE_TODOS = gql`\n      query CompleteTodos {\n        todos: todosComplete{\n          id  \n          task\n          completed\n        }\n      }`;\nconst NOT_COMPLETE_TODOS = gql`\n      query NotCompleteTodos {\n        todos: todosIncomplete{\n          id  \n          task\n          completed\n        }\n      }`;\nconst CREATE_TODO = gql`\n      mutation CreateTodo($task: String!, $completed: Boolean = false) {\n        createTodo(task: $task , completed: $completed){\n        todo{\n          id  \n          task\n          completed\n          }\n        }\n      }`;\nconst UPDATE_TODO = gql`\n      mutation UpdateTodo($id: Int!, $completed: Boolean = false) {\n        updateTodo(id: $id , completed: $completed){\n        todo{\n          id  \n          task\n          completed\n          }\n        }\n      }`;\nexport {FETCH_TODOS, CREATE_TODO, COMPLETE_TODOS, NOT_COMPLETE_TODOS, UPDATE_TODO}","import {\n    gql,\n    useMutation\n} from \"@apollo/client\";\nimport {COMPLETE_TODOS, NOT_COMPLETE_TODOS, CREATE_TODO} from \"../gqlQueries\";\n\nfunction CreateTodo() {\n    let input;\n\n    const [createTodo, {loading, error}] = useMutation(CREATE_TODO, {\n        refetchQueries: [\n            COMPLETE_TODOS,\n            'fetch complete todos',\n            NOT_COMPLETE_TODOS,\n            'fetch not complete todos'\n        ],\n    });\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return <div className=\"create\">\n        <form\n            onSubmit={e => {\n                e.preventDefault();\n                createTodo({variables: {task: input.value}});\n                input.value = '';\n            }}\n        >\n            <input\n                ref={node => {\n                    input = node;\n                }}\n            />\n            <button type=\"submit\">Add Todo</button>\n        </form>\n    </div>\n        ;\n}\n\nexport default CreateTodo;\n","import {\n    useQuery\n} from \"@apollo/client\";\nimport {COMPLETE_TODOS} from \"../gqlQueries\";\n\nfunction CompleteTodos({checktodo}) {\n    const {loading, error, data} = useQuery(COMPLETE_TODOS);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        <div className=\"todoContainer\">\n            {\n                data.todos.map(({id, task, completed}) => (\n                    <div className=\"todo completeTodo\" key={id}>\n                        <div className=\"task\"> {task}</div>\n                        <input type=\"checkbox\" checked={completed}\n                        onChange={(e)=>{checktodo({variables: {id: id, completed: e.target.checked  }})}}\n                        />\n                    </div>\n\n                ))\n            }\n        </div>\n    )\n}\n\nexport default CompleteTodos;\n","import {\n    useQuery\n} from \"@apollo/client\";\nimport {NOT_COMPLETE_TODOS} from \"../gqlQueries\";\n\nfunction NotCompleteTodos({checktodo}) {\n\n\n    const {loading, error, data} = useQuery(NOT_COMPLETE_TODOS);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        <div className=\"todoContainer\">\n            {\n                data.todos.map(({id, task, completed}) => (\n                    <div className=\"todo\" key={id}>\n                        <div className=\"task\"> {task}</div>\n                        <input type=\"checkbox\" checked={completed}\n                               onChange={(e)=>{checktodo({variables: {id: id, completed: e.target.checked }})}}\n                        />\n                    </div>\n\n                ))\n            }\n        </div>\n    )\n}\n\nexport default NotCompleteTodos;","import './App.css';\nimport {\n    gql, useMutation\n} from \"@apollo/client\";\nimport CreateTodo from \"./components/CreateTodo\";\nimport {COMPLETE_TODOS, NOT_COMPLETE_TODOS, UPDATE_TODO} from \"./gqlQueries\";\nimport CompleteTodos from \"./components/CompleteTodos\";\nimport NotCompleteTodos from \"./components/NotCompleteTodos\";\n\nfunction App() {\n\n    const [checktodo, {loading, error}] = useMutation(UPDATE_TODO, {\n        refetchQueries: [\n            COMPLETE_TODOS,\n            'fetch complete todos',\n            NOT_COMPLETE_TODOS,\n            'fetch not complete todos'\n        ],\n    });\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        <div className=\"app\">\n            <CreateTodo />\n            <NotCompleteTodos checktodo={checktodo} />\n            <CompleteTodos  checktodo={checktodo} />\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n} from \"@apollo/client\";\nimport Cookies from 'js-cookie'\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\nconst csrftoken = getCookie('csrftoken')\nconst client = new ApolloClient({\n    uri: '/graphql/',\n    cache: new InMemoryCache(),\n    //credentials: 'include',\n    headers: {\n        'X-CSRFToken': csrftoken,\n    },\n\n});\n\n\nrender(\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}